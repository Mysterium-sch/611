#Valerie Duffey; Lily Lamb
.text

#NEED TO TAKE NUM FROM GPIO
csrrw x21, 0xf00, x0
add x3, x0, x21


addi x9, x0, 10			# x9 = 10
addi x1, x0, 1000
mul x1, x1, x9			# x1 = 10,000   


# Makes the .1                      x5 = ".1"
lui x5, 104857
addi x31, x0, 1229
addi x31, x31, 1229
or x5, x5, x31

addi x2, x0, 1024
slli x2, x2, 4	    #x2=16,384
mul x3, x3, x2

# Sets initial guess x4 to 0       x4=0
addi x4, zero, 0

#Sets initial step x6 to 256        x6=256
addi x6, x0, 1
slli x6 , x6 , 8


# SQUARE ROOT
Cal_hx2: beq x6 , x0, exit     				#exits if step is 0           
mul x7, x4, x4 # Finds t0^2 lower bits        
mulhu x16, x4, x4 # Finds t0^2 higher bits  
srli x15, x7, 14 # Takes 14 most right bits from lower
slli x14, x16, 18 # Takes 18 most left bits of higher
or x7, x15, x14 # Ors the lower and higher bits

#______________ Exit case 1: Checks to see if guess is exactly 1 away from expected result
addi x11, x4, 1 
mul x11, x11, x11
mul x11, x11, x2
beq x11, x3, exitflash

#______________ Exit case 2: Checks to see if guess is equal to expected result
beq x7, x3, exit

#______________ Exit case 1: Checks to see if guess^2 and user entry have a 1 bit difference 
bgt x3, x7, pos
sub x12, x7, x3
srli x12, x12, 1
beq x12, x3, exit
jal after

pos: sub x12, x3, x7
srli x12, x12, 1
beq x12, x3, exit

# Subs/Adds if no exit conditions are met
after: bgt x7, x3, dropit
blt x7, x3, raiseit

# Subtracts guess by step size
dropit:sub x4,x4,x6 
srli x6 , x6 , 1 #step size t0/2
jal Cal_hx2

# Adds guess by step size
raiseit:add x4, x4, x6 
srli x6 , x6 , 1 #step size t0/2
jal Cal_hx2

exitflash:addi x4, x4, 1



#convert number to decimal 
exit:mulhu x4, x4, x21
mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x8,x30,x9

mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x7,x30,x9
slli x7, x7, 4
or x20, x7, x8

mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x6,x30,x9
slli x6, x6, 8

mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x15,x30,x9
slli x15, x15, 12
or x11, x15, x6
or x20, x11, x20

mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x12,x30,x9
slli x12, x12, 16

mul x30, x4, x5 # Finds lower bits
mulhu x4, x4, x5 # Finds higher bits
mulhu x13,x30,x9
slli x13, x13, 20
or x13, x13, x12
or x20, x13, x20                        #x20 = final number
                            
#output                            
csrrw x20, 0xf02, x21
csrrw x22, 0xf00, x20

